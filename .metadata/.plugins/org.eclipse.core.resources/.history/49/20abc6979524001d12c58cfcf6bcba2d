package com.example.demo.security;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;
import org.springframework.security.authentication.AbstractAuthenticationToken;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter{
	@Autowired
	private TokenProvider tokenProvider;
	
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, 
			FilterChain filterChain) throws ServletException, IOException{
		try {
			// 요청에서 토큰 가져오기
			String token = parseBearerToken(request);
			log.info("Filter is running...");
			
			// 토큰 검사
			if(token != null && !token.equalsIgnoreCase("null")) {
				// userId 가져오기
				String userId = tokenProvider.validateAndGetUserId(token);
				log.info("Authentication user Id: " + userId);
				
				AbstractAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
						userId, null, AuthorityUtils.NO_AUTHRITIES);
				authentication.setDetails(new WebAuthenticationDetailsScore().buildDetails(request));
				
			}
		}catch(Exception e) {
			
		}
	}
	
	private String parseBearerToken(HttpServletRequest request) {
		String bearerToken = request.getHeader("Authorization");
		
		if(StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
			return bearerToken.substring(7);   // 토큰만 
		}
		return null;
	}
}
